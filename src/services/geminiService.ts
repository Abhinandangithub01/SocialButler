import { GoogleGenAI, Modality } from "@google/genai";
import { AspectRatio, FontStyle, TextPlacement, ArtStyle, LightingStyle, Framing, ImageEffect } from "../types";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

export const enhanceThumbnailPrompt = async (
    title: string, 
    theme: string, 
    hasBaseImage: boolean,
    aspectRatio: AspectRatio,
    textPlacement: TextPlacement,
    fontStyle: FontStyle,
    textColorStyle: string,
    artStyle: ArtStyle,
    lightingStyle: LightingStyle,
    framing: Framing,
    colorPalette: string,
    negativePrompt: string,
    imageEffect: ImageEffect
): Promise<string> => {
    
    const textInstructionParts: string[] = [];
    if (textPlacement && textPlacement !== 'AI Recommended') {
        textInstructionParts.push(`placed in the ${textPlacement.toLowerCase()}`);
    }
    if (fontStyle && fontStyle !== 'AI Recommended') {
        textInstructionParts.push(`using a ${fontStyle.toLowerCase()} font`);
    }
    if (textColorStyle) {
        textInstructionParts.push(`in a '${textColorStyle}' color/style`);
    }

    let textInstruction;
    if (textInstructionParts.length > 0) {
        textInstruction = `"The text '${title}' should be prominent, ${textInstructionParts.join(', ')}."`;
    } else {
        textInstruction = `"The text '${title}' should be placed in the most impactful position using a font, style, and color that perfectly complements the overall theme and composition."`;
    }

    const imageEffectInstruction = imageEffect && imageEffect !== 'None' 
        ? `Finally, apply a full-image post-processing effect of '${imageEffect}'. If the effect is 'Duotone', use a high-contrast two-color scheme that complements the primary theme.`
        : '';

    const metaPrompt = `You are an expert prompt engineer for an AI image generator. Your task is to convert a user's simple request into a detailed, effective prompt for creating a YouTube thumbnail.

User's Request:
- Title Text: ${title}
- Theme: ${theme}
- Art Style: ${artStyle}
- Lighting Style: ${lightingStyle}
- Framing: ${framing}
- Color Palette: ${colorPalette || 'AI Recommended'}
- Base Image Provided: ${hasBaseImage}
- Aspect Ratio: ${aspectRatio}
- Text Placement: ${textPlacement}
- Font Style: ${fontStyle}
- Text Color/Style: ${textColorStyle || 'AI Recommended'}
- Image Effect: ${imageEffect}
- Negative Prompt (what to avoid): ${negativePrompt || 'None'}

Your Task:
Based on the user's request, generate a new, highly descriptive prompt. The prompt must:
- Be a single paragraph of descriptive text.
- Incorporate the Theme, Art Style, Lighting, Framing, and Color Palette. For example, for 'Vibrant & Bold', use words like 'high-contrast, saturated colors'. For 'Photorealistic', describe camera settings. For 'Dramatic Studio Light', specify key and fill lights.
- Describe a composition that is eye-catching and follows YouTube best practices (e.g., clear subject, high contrast, emotional expression) with a ${aspectRatio} aspect ratio.
- Include a specific instruction for the Title Text. ${textInstruction}
- If a base image is provided, instruct the model to use it as the main subject and enhance it according to the theme and other style parameters, rather than creating a new subject from scratch.
- If a negative prompt is provided, incorporate instructions to avoid those elements. For example, if the negative prompt is "blurry, text", the generated prompt should include phrases like "sharp focus, crisp details, no additional text on the image".
- ${imageEffectInstruction}

Generate the detailed prompt now.`;

  const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: metaPrompt,
  });
  return response.text;
};

export const generateThumbnailWithPrompt = async (prompt: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [{ text: prompt }],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            return part.inlineData.data;
        }
    }
    throw new Error("No image was generated by the model from the prompt.");
};

export const editThumbnailWithImage = async (prompt: string, base64Image: string, mimeType: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [
                { inlineData: { data: base64Image, mimeType: mimeType } },
                { text: prompt },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            return part.inlineData.data;
        }
    }
    throw new Error("No image was generated by the model.");
};

export const generateSocialPost = async (platform: string, postType: string, idea: string): Promise<{ postText: string; imagePrompt: string; }> => {
    const prompt = `You are an expert social media manager. Your task is to write a compelling social media post based on the user's specifications.

User's Specifications:
- Platform: ${platform}
- Post Type: ${postType}
- Main Idea: ${idea}

Your Task:
- Write a post that is perfectly tailored for the selected Platform.
- For LinkedIn: Use a professional, insightful tone. Structure it with whitespace for readability. Include 3-5 relevant, professional hashtags.
- For Instagram: Use a more conversational and engaging tone. Use relevant emojis. Include 5-10 popular and niche hashtags.
- Craft the content to match the Post Type. For a 'Community Question', end with an open-ended question. For 'Marketing', include a clear call-to-action.
- Use the Main Idea as the core of the message.
- Important: At the very end of your response, on a new line, write a short, visual description of an image that would perfectly accompany this post. Start this line with IMAGE_PROMPT:. The image should be suitable for a social media feed, usually with a 1:1 square aspect ratio.

Generate the post now.`;

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt
    });

    const fullText = response.text;
    const lines = fullText.split('\n');
    const imagePromptLine = lines.find(line => line.startsWith('IMAGE_PROMPT:'));
    
    if (imagePromptLine) {
        const imagePrompt = imagePromptLine.replace('IMAGE_PROMPT:', '').trim();
        const postText = lines.filter(line => !line.startsWith('IMAGE_PROMPT:')).join('\n').trim();
        return { postText, imagePrompt };
    }

    return { postText: fullText, imagePrompt: '' };
};

export const generateImageForSocialPost = async (prompt: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [{ text: prompt }],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            return part.inlineData.data;
        }
    }
    throw new Error("No image was generated by the model for the social post.");
};

export const removeImageBackground = async (base64Image: string, mimeType: string): Promise<string> => {
    const prompt = "Please remove the background of this image. The main subject should be preserved and the new background should be transparent. Output a PNG file.";
    
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [
                { inlineData: { data: base64Image, mimeType: mimeType } },
                { text: prompt },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            return part.inlineData.data;
        }
    }
    throw new Error("No image was generated by the model.");
};
